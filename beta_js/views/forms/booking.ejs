<!-- htmlhint spec-char-escape:false -->

<!--
This is the booking form which gets inserted into the 'box' view

There is a script at the end of it used to create an interactive datepicker on the form

We start <form> elements as follows.
We set the 'method' attribute to 'post' in order to have the form send a POST request.

The request is sent to the current URL by default.
Therefore app.post( '/box/:id' ) is where our app will listen for the form submission
-->

<form method="post">
  
  <!--   
  Each Input gets its own Label
  The values of the "for" attribute and the "id" attribute should be the same in order to link the label to its input.
  
  Each input also has a "name" attribute which specifies the name under which that data will be sent in the request
  
  In a sense, the "id" is used by the browser, and the "name" is the name used by the server.
  -->
  
  <label for="start">Check In Date</label>
  <input id="start" name="start">

  <label for="end">Check Out Date</label>
  <input id="end" name="end">

  <!--
  Each form must have a submit button at the end
  -->

  <div class="buttons">
    <button type="submit">Book This Box!</button>
  </div>

  <!--
  Advanced challenge: Add a name field to the above form.
  Then, in the form submission's response under the 'box' controller,
  personalize the response's message with the submitted name.
  (eg: "Eric, thank you for booking with us! etc...")
  -->

</form>


<script>

  // Oh no! The datepicker only works on the Check In field. But vacation's gotta end eventually.
  // Modify the code below so that the datepicker works on the Check Out field as well.
  
  $( '#start' ).datepicker()

</script>